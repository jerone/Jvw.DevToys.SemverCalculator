name: "CI & CD: Build & Test .NET Solution, Create & Validate & Publish Nuget Package and Create Release"

on:
  push:
    branches:
      - "**"
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
  pull_request:
    branches:
      - "**"
  workflow_dispatch:

env:
  NuGetArtifactName: "NuGet package"
  NuGetDirectory: ${{ github.workspace }}/nupkgs
  NuGetVersion: 0.0.0

jobs:
  build_test:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8"

      - name: Build solution
        run: dotnet build

      - name: Test solution
        run: dotnet test --no-build --logger GitHubActions
        # Logger: https://github.com/Tyrrrz/GitHubActionsTestLogger

  analyze_codeql:
    name: Run CodeQL scanning
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: csharp

      - name: Auto-build by CodeQL
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  analyze_sonarcloud:
    name: Run SonarCloud scanning
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for SonarCloud.

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8"

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      - name: Start SonarCloud analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin `
            /k:"jerone_Jvw.DevToys.SemverCalculator" `
            /o:"jerone" `
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.host.url="https://sonarcloud.io" `
            /d:sonar.exclusions="**/Pack/**/*.xml" `
            /d:sonar.verbose=true

      - name: Build solution
        run: dotnet build

      - name: End SonarCloud analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  nuget_pack:
    name: Pack NuGet package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8"

      - name: Set version variable
        if: ${{ github.ref_type == 'tag' }}
        env:
          TAG: ${{ github.ref_name }}
        run: echo "NuGetVersion=${TAG#v}" >> $GITHUB_ENV

      - name: Build package
        run: dotnet build --configuration Release /p:Version=$NuGetVersion
        working-directory: "Jvw.DevToys.SemverCalculator"

      - name: Pack NuGet package
        run: dotnet pack --no-build --output ${{ env.NuGetDirectory }} /p:PackageVersion=$NuGetVersion
        working-directory: "Jvw.DevToys.SemverCalculator"

      - name: Upload NuGet package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.NuGetArtifactName }}
          path: ${{ env.NuGetDirectory }}/*.nupkg

  nuget_validate:
    name: Validate NuGet package
    runs-on: ubuntu-latest
    needs: [nuget_pack]
    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8"

      - name: Install nuget validator
        run: dotnet tool install Meziantou.Framework.NuGetPackageValidation.Tool --global

      - uses: actions/download-artifact@v4
        with:
          name: ${{ env.NuGetArtifactName }}
          path: ${{ env.NuGetDirectory }}

      - name: Validate package
        shell: pwsh
        run: meziantou.validate-nuget-package (Get-ChildItem "${{ env.NuGetDirectory }}/*.nupkg")

  nuget_publish:
    name: Publish NuGet package
    runs-on: ubuntu-latest
    needs: [nuget_validate, build_test, analyze_codeql, analyze_sonarcloud]
    if: github.ref_type == 'tag' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8"

      - uses: actions/download-artifact@v4
        with:
          name: ${{ env.NuGetArtifactName }}
          path: ${{ env.NuGetDirectory }}

      - name: Publish NuGet package
        run: dotnet nuget push ${{ env.NuGetDirectory }}/*.nupkg -k ${{ secrets.NUGET_APIKEY }} -s https://api.nuget.org/v3/index.json

  release:
    name: Create release on GitHub
    runs-on: ubuntu-latest
    needs: [nuget_publish]
    permissions:
      contents: write # Needed to create a release.
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: ${{ env.NuGetArtifactName }}
          path: ${{ env.NuGetDirectory }}

      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          generateReleaseNotes: true
          artifacts: ${{ env.NuGetDirectory }}/*.nupkg
